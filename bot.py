"""Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏."""
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from weather_service import get_weather

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await update.message.reply_text(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏.\n'
        '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, —ñ —è –ø–æ–∫–∞–∂—É –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É.\n'
        '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –õ—å–≤—ñ–≤, –û–¥–µ—Å–∞'
    )

async def help_command(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    await update.message.reply_text(
        '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n'
        '/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n'
        '/help - –î–æ–≤—ñ–¥–∫–∞\n\n'
        '–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏.'
    )

async def get_weather_handler(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞."""
    city = update.message.text.strip()

    if not city:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.')
        return

    await update.message.reply_text(f'–û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤ –º—ñ—Å—Ç—ñ {city}...')

    weather_data = get_weather(city)

    if weather_data.get('error'):
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {weather_data['error']}")
    else:
        message = (
            f"üåç –ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {weather_data['city']}, {weather_data['country']}\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}¬∞C\n"
            f"ü§î –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {weather_data['feels_like']}¬∞C\n"
            f"‚òÅÔ∏è –û–ø–∏—Å: {weather_data['description']}\n"
            f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {weather_data['humidity']}%\n"
            f"üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {weather_data['wind_speed']} –º/—Å\n"
            f"üîΩ –¢–∏—Å–∫: {weather_data['pressure']} –≥–ü–∞"
        )
        await update.message.reply_text(message)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
    logger.error('Update %s caused error %s', update, context.error)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')

    if not telegram_token:
        logger.error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ')
        return

    application = Application.builder().token(telegram_token).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_weather_handler))

    application.add_error_handler(error_handler)

    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...')
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
